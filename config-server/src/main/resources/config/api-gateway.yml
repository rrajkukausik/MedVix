# API Gateway Configuration
server:
  port: 8080

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: user-service
              uri: lb://USER-SERVICE
              predicates:
                - Path=/user-service/**
              filters:
                - StripPrefix=1
            - id: medicine-service
              uri: lb://medicine-service
              predicates:
                - Path=/api/medicines/**
              filters:
                - StripPrefix=2
            - id: inventory-service
              uri: lb://inventory-service
              predicates:
                - Path=/api/inventory/**
              filters:
                - StripPrefix=2
            - id: sales-service
              uri: lb://sales-service
              predicates:
                - Path=/api/sales/**
              filters:
                - StripPrefix=2
            - id: customer-service
              uri: lb://customer-service
              predicates:
                - Path=/api/customers/**
              filters:
                - StripPrefix=2
            - id: dealer-service
              uri: lb://dealer-service
              predicates:
                - Path=/api/dealers/**
              filters:
                - StripPrefix=2
            - id: notification-service
              uri: lb://notification-service
              predicates:
                - Path=/api/notifications/**
              filters:
                - StripPrefix=2
            - id: reporting-service
              uri: lb://reporting-service
              predicates:
                - Path=/api/reports/**
              filters:
                - StripPrefix=2
            - id: billscan-service
              uri: lb://billscan-service
              predicates:
                - Path=/api/billscan/**
              filters:
                - StripPrefix=2

# Eureka client configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true

# CORS configuration
cors:
  allowed-origins: "*"
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: "*"

# Circuit breaker configuration
resilience4j:
  circuitbreaker:
    instances:
      user-service:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
      medicine-service:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10
      inventory-service:
        failure-rate-threshold: 50
        wait-duration-in-open-state: 30s
        sliding-window-size: 10

# Rate limiting (disabled for now - requires Redis)
# spring:
#   cloud:
#     gateway:
#       default-filters:
#         - name: RequestRateLimiter
#           args:
#             redis-rate-limiter.replenishRate: 10
#             redis-rate-limiter.burstCapacity: 20

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
